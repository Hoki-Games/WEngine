import { Vector2, Matrix3 } from '../math.js';
export default class TransformMatrix3 extends Matrix3 {
    #private;
    constructor(buffer: Float32Array);
    constructor(options: {
        translate?: Vector2;
        rotate?: number;
        skew?: number;
        scale?: Vector2;
    });
    calcMatrix(): this;
    calcFields(): this;
    translateX(x: number, recalc?: boolean): this;
    translateY(y: number, recalc?: boolean): this;
    translate(x: number, y: number, recalc?: boolean): this;
    rotate(r: number, recalc?: boolean): TransformMatrix3;
    rotate(x: number, y: number, recalc?: boolean): TransformMatrix3;
    scaleX(sx: number, recalc?: boolean): this;
    scaleY(sy: number, recalc?: boolean): this;
    scale(sx: number, sy: number, recalc?: boolean): this;
    skew(k: number, recalc?: boolean): this;
    matrix(a?: number, b?: number, c?: number, d?: number, e?: number, f?: number): void;
    copy(): TransformMatrix3;
    copyFields(value: TransformMatrix3): void;
    setArray(value: ArrayLike<number>, offset?: number): void;
    get tx(): number;
    get ty(): number;
    get t(): Vector2;
    get r(): number;
    get rd(): number;
    get sx(): number;
    get sy(): number;
    get s(): Vector2;
    get k(): number;
    get kt(): number;
    get m(): number[];
    get a(): number;
    set a(v: number);
    get b(): number;
    set b(v: number);
    get c(): number;
    set c(v: number);
    get d(): number;
    set d(v: number);
    get e(): number;
    set e(v: number);
    get f(): number;
    set f(v: number);
}
